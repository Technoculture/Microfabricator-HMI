// @generated by protobuf-ts 2.2.2
// @generated from protobuf file "base.proto" (package "microfabricator", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { on_off } from "./common";
/**
 * *
 * Messages
 *
 * @generated from protobuf message microfabricator.FanRequest
 */
export interface FanRequest {
    /**
     * @generated from protobuf field: microfabricator.on_off state = 1;
     */
    state: on_off;
}
/**
 * @generated from protobuf message microfabricator.FanResponse
 */
export interface FanResponse {
    /**
     * @generated from protobuf field: microfabricator.on_off state = 1;
     */
    state: on_off;
}
/**
 * @generated from protobuf message microfabricator.AirQualityUpdate
 */
export interface AirQualityUpdate {
}
// @generated message type with reflection information, may provide speed optimized methods
class FanRequest$Type extends MessageType<FanRequest> {
    constructor() {
        super("microfabricator.FanRequest", [
            { no: 1, name: "state", kind: "enum", T: () => ["microfabricator.on_off", on_off] }
        ]);
    }
    create(value?: PartialMessage<FanRequest>): FanRequest {
        const message = { state: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FanRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FanRequest): FanRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* microfabricator.on_off state */ 1:
                    message.state = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FanRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* microfabricator.on_off state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message microfabricator.FanRequest
 */
export const FanRequest = new FanRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FanResponse$Type extends MessageType<FanResponse> {
    constructor() {
        super("microfabricator.FanResponse", [
            { no: 1, name: "state", kind: "enum", T: () => ["microfabricator.on_off", on_off] }
        ]);
    }
    create(value?: PartialMessage<FanResponse>): FanResponse {
        const message = { state: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FanResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FanResponse): FanResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* microfabricator.on_off state */ 1:
                    message.state = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FanResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* microfabricator.on_off state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message microfabricator.FanResponse
 */
export const FanResponse = new FanResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AirQualityUpdate$Type extends MessageType<AirQualityUpdate> {
    constructor() {
        super("microfabricator.AirQualityUpdate", []);
    }
    create(value?: PartialMessage<AirQualityUpdate>): AirQualityUpdate {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AirQualityUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AirQualityUpdate): AirQualityUpdate {
        return target ?? this.create();
    }
    internalBinaryWrite(message: AirQualityUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message microfabricator.AirQualityUpdate
 */
export const AirQualityUpdate = new AirQualityUpdate$Type();
