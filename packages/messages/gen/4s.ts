// @generated by protobuf-ts 2.2.2
// @generated from protobuf file "4s.proto" (package "microfabricator", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { on_off } from "./common";
/**
 * *
 *  Messages
 *
 * @generated from protobuf message microfabricator.DrawerRequest
 */
export interface DrawerRequest {
    /**
     * @generated from protobuf field: microfabricator.drawer_position position = 1;
     */
    position: drawer_position;
}
/**
 * @generated from protobuf message microfabricator.DrawerResponse
 */
export interface DrawerResponse {
    /**
     * @generated from protobuf field: microfabricator.drawer_position position = 1;
     */
    position: drawer_position;
}
/**
 * @generated from protobuf message microfabricator.ClampRequest
 */
export interface ClampRequest {
    /**
     * @generated from protobuf field: microfabricator.on_off state = 1;
     */
    state: on_off;
}
/**
 * @generated from protobuf message microfabricator.ClampResponse
 */
export interface ClampResponse {
    /**
     * @generated from protobuf field: microfabricator.on_off state = 1;
     */
    state: on_off;
}
/**
 * @generated from protobuf message microfabricator.VibrationUpdate
 */
export interface VibrationUpdate {
    /**
     * @generated from protobuf field: int32 avg_vibration = 1;
     */
    avgVibration: number;
    /**
     * @generated from protobuf field: int32 std_vibration = 2;
     */
    stdVibration: number;
    /**
     * optional int32 min_vibartion = 3;
     * optional int32 max_vibration = 4;
     *
     * @generated from protobuf field: optional int32 temperature = 3;
     */
    temperature?: number;
}
/**
 * @generated from protobuf message microfabricator.WaferMaskDistanceUpdate
 */
export interface WaferMaskDistanceUpdate {
    /**
     * @generated from protobuf field: int32 distance_0_1um = 1 [json_name = "distance01um"];
     */
    distance01Um: number; // distance in units of 0.1 um [UNSUAL CHOICE]
}
// https://developers.google.com/protocol-buffers/docs/proto3?hl=en#enum

/**
 * *
 *  Common Types
 *
 * @generated from protobuf enum microfabricator.drawer_position
 */
export enum drawer_position {
    /**
     * @generated from protobuf enum value: NULL_DRAW_POSITION = 0;
     */
    NULL_DRAW_POSITION = 0,
    /**
     * @generated from protobuf enum value: INSIDE = 1;
     */
    INSIDE = 1,
    /**
     * @generated from protobuf enum value: OUTSIDE = 2;
     */
    OUTSIDE = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class DrawerRequest$Type extends MessageType<DrawerRequest> {
    constructor() {
        super("microfabricator.DrawerRequest", [
            { no: 1, name: "position", kind: "enum", T: () => ["microfabricator.drawer_position", drawer_position] }
        ]);
    }
    create(value?: PartialMessage<DrawerRequest>): DrawerRequest {
        const message = { position: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DrawerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DrawerRequest): DrawerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* microfabricator.drawer_position position */ 1:
                    message.position = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DrawerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* microfabricator.drawer_position position = 1; */
        if (message.position !== 0)
            writer.tag(1, WireType.Varint).int32(message.position);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message microfabricator.DrawerRequest
 */
export const DrawerRequest = new DrawerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DrawerResponse$Type extends MessageType<DrawerResponse> {
    constructor() {
        super("microfabricator.DrawerResponse", [
            { no: 1, name: "position", kind: "enum", T: () => ["microfabricator.drawer_position", drawer_position] }
        ]);
    }
    create(value?: PartialMessage<DrawerResponse>): DrawerResponse {
        const message = { position: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DrawerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DrawerResponse): DrawerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* microfabricator.drawer_position position */ 1:
                    message.position = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DrawerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* microfabricator.drawer_position position = 1; */
        if (message.position !== 0)
            writer.tag(1, WireType.Varint).int32(message.position);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message microfabricator.DrawerResponse
 */
export const DrawerResponse = new DrawerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClampRequest$Type extends MessageType<ClampRequest> {
    constructor() {
        super("microfabricator.ClampRequest", [
            { no: 1, name: "state", kind: "enum", T: () => ["microfabricator.on_off", on_off] }
        ]);
    }
    create(value?: PartialMessage<ClampRequest>): ClampRequest {
        const message = { state: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClampRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClampRequest): ClampRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* microfabricator.on_off state */ 1:
                    message.state = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClampRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* microfabricator.on_off state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message microfabricator.ClampRequest
 */
export const ClampRequest = new ClampRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClampResponse$Type extends MessageType<ClampResponse> {
    constructor() {
        super("microfabricator.ClampResponse", [
            { no: 1, name: "state", kind: "enum", T: () => ["microfabricator.on_off", on_off] }
        ]);
    }
    create(value?: PartialMessage<ClampResponse>): ClampResponse {
        const message = { state: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClampResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClampResponse): ClampResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* microfabricator.on_off state */ 1:
                    message.state = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClampResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* microfabricator.on_off state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message microfabricator.ClampResponse
 */
export const ClampResponse = new ClampResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VibrationUpdate$Type extends MessageType<VibrationUpdate> {
    constructor() {
        super("microfabricator.VibrationUpdate", [
            { no: 1, name: "avg_vibration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "std_vibration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "temperature", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<VibrationUpdate>): VibrationUpdate {
        const message = { avgVibration: 0, stdVibration: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VibrationUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VibrationUpdate): VibrationUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 avg_vibration */ 1:
                    message.avgVibration = reader.int32();
                    break;
                case /* int32 std_vibration */ 2:
                    message.stdVibration = reader.int32();
                    break;
                case /* optional int32 temperature */ 3:
                    message.temperature = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VibrationUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 avg_vibration = 1; */
        if (message.avgVibration !== 0)
            writer.tag(1, WireType.Varint).int32(message.avgVibration);
        /* int32 std_vibration = 2; */
        if (message.stdVibration !== 0)
            writer.tag(2, WireType.Varint).int32(message.stdVibration);
        /* optional int32 temperature = 3; */
        if (message.temperature !== undefined)
            writer.tag(3, WireType.Varint).int32(message.temperature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message microfabricator.VibrationUpdate
 */
export const VibrationUpdate = new VibrationUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WaferMaskDistanceUpdate$Type extends MessageType<WaferMaskDistanceUpdate> {
    constructor() {
        super("microfabricator.WaferMaskDistanceUpdate", [
            { no: 1, name: "distance_0_1um", kind: "scalar", jsonName: "distance01um", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<WaferMaskDistanceUpdate>): WaferMaskDistanceUpdate {
        const message = { distance01Um: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WaferMaskDistanceUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WaferMaskDistanceUpdate): WaferMaskDistanceUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 distance_0_1um = 1 [json_name = "distance01um"];*/ 1:
                    message.distance01Um = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WaferMaskDistanceUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 distance_0_1um = 1 [json_name = "distance01um"]; */
        if (message.distance01Um !== 0)
            writer.tag(1, WireType.Varint).int32(message.distance01Um);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message microfabricator.WaferMaskDistanceUpdate
 */
export const WaferMaskDistanceUpdate = new WaferMaskDistanceUpdate$Type();
